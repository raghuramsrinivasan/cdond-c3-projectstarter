version: 2.1
orbs: 
  slack: circleci/slack@4.5.0
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
         type: string     
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
            aws cloudformation delete-stack  --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack  --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
         type: string   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
                          
            if(( SUCCESS==true )); 
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert               
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1    

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1     
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front End Unit Test
          command: |
             cd frontend
             npm install
             npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back End Unit Test
          command: |
             cd backend
             npm install
             npm run test
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back End vulnerability scan
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front End vulnerability scan
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical                      
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=raghu-udacity-prj3 \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  --region=us-east-1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=raghu-udacity-prj3 \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --region=us-east-1 
            
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"   

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys: 
          fingerprints: ["3f:04:ee:cd:d9:c7:f5:18:90:65:2f:b7:9b:a6:56:54"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          no_output_timeout: 10m
          command: |
            pwd
            cat .circleci/ansible/inventory.txt
            echo ENVIRONMENT=production > "backend/.env"            
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
            cat backend/.env
            ls backend
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend      
      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: install npm
          command: |
            cd backend
            npm install
      - run:
          name: install other dependencies
          command: |
            npm install typescript
            npm --update install python3 npm        
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            cd backend
            npm run migrations:revert
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
        
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            echo "The Migration Was Successful!!"
            curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"     
      - revert-migrations:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"   
  
  deploy-backend:
    docker:
       - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: ["3f:04:ee:cd:d9:c7:f5:18:90:65:2f:b7:9b:a6:56:54"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
      - run:
          name: install tar
          command: apk add --update tar gzip
      - run:
          name: install curl
          command: apk add --update curl
      - run:
          name: Install node 
          command: |
            apk add --update nodejs           
      - run:
          name: Install npm
          command: |
            apk add --update npm
      - run:
          name: Install aws cli
          command: |
            pip install awscli   
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..   
            tar -C backend -czvf artifact.tar.gz .
            pwd
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
            ansible-playbook -i inventory.txt node-exporter.yml
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"     
      - revert-migrations:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"             
  smoke-test:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - run:
          name: install curl
          command: apk add --update curl
      - run:
          name: Install node 
          command: |
            apk add --update nodejs           
      - run:
          name: Install npm
          command: |
            apk add --update npm
      - run:
          name: Install aws cli
          command: |
            pip install awscli   
      - run:
          name: Get back end url and run Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo  "${BACKEND_IP}"
            BK_API_URL="http://${BACKEND_IP}:3030"
            echo "${BK_API_URL}"  
            echo "${BK_API_URL}" 
            APIURL="${BK_API_URL}/api/status"
            echo ${APIURL}
            if curl -s ${APIURL} | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"     
      - revert-migrations:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"    
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout    
      - run:
          name: Install tar gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            OLD_WORKFLOWID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "${OLD_WORKFLOWID}"  
            curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "$OLD_WORKFLOWID" https://api.memstash.io/values/workflowid

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout  
      - run:
          name: Remove old stacks and files
          command: |
            OLD_WORKFLOWID=$(curl -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/workflowid)
            export OLD_WORKFLOW_ID="udapeople-$OLD_WORKFLOWID"
            echo Old Workflow Id: "${OLD_WORKFLOW_ID}"
            CurrentWorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
            echo "current workflow ${CurrentWorkflowID}"
            echo Old Workflow Id unq: "${OLD_WORKFLOWID}"
            if [[ "${CurrentWorkflowID}" != "${OLD_WORKFLOW_ID}" ]]
            then
              aws s3 rm s3://${OLD_WORKFLOW_ID}/ --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOWID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOWID}"
            fi                    
        
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [ test-frontend, test-backend,scan-backend,scan-frontend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure] 
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]    
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]                                       